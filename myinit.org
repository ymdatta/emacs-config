#+STARTIP: overview
* Interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)

;;Everytime yes or no option is changed to y or n.
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC
  
* which-key
   Brings up some help
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

* Org mode
#+BEGIN_SRC emacs-lisp
;; Org-mode stuff
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))

;;  ido(interactively do things) mode
;;(setq ido-enable-flex-matching t)
;;(setq ido-everywhere t)
;;(ido-mode 1)
#+END_SRC

* Swiper/Ivy/Counsel
Swiper gives us a really efficient incremental search with regular 
expressions and Ivy/Counsel replace a lot of ido or helms completion
functionality.
#+BEGIN_SRC emacs_lisp
;; looks like counsel is requirement for swiper!
(use-package counsel
  :ensure t
  )

(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))

(use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
  ))
#+END_SRC

* Autocomplete
#+BEGIN_SRC emacs_lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
  (ac-config-default)
   (global-auto-complete-mode t)
  ))
#+END_SRC
